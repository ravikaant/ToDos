{"ast":null,"code":"var _jsxFileName = \"/Users/administrator/Downloads/Projects/ToDos/todo_app/src/components/tasks.jsx\";\nimport React from \"react\";\nimport { Component } from \"react\";\nconst MAX_RECORDS_PER_PAGE = 4;\n\nclass Tasks extends Component {\n  constructor() {\n    this.setState({\n      currentPage: 1\n    });\n  }\n\n  getFilteredTasks() {\n    switch (this.props.view) {\n      case \"COMPLETE\":\n        return this.props.tasks.filter(v => v.status === \"COMPLETE\");\n\n      case \"INCOMPLETE\":\n        return this.props.tasks.filter(v => v.status === \"INCOMPLETE\");\n\n      default:\n        return this.props.tasks;\n    }\n  }\n\n  getTasksForPage(filteredTasks, pagno) {\n    const indexOfLastTask = this.state.currentPage * MAX_RECORDS_PER_PAGE;\n    const indexOfFirstTask = indexOfLastTask - MAX_RECORDS_PER_PAGE;\n    return filteredTasks.slice(indexOfFirstTask, indexOfLastTask);\n  }\n\n  render() {\n    const filteredTasks = this.getFilteredTasks();\n    const totalPages = Math.ceil(filteredTasks.length / MAX_RECORDS_PER_PAGE);\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, this.renderTasks(this.getTasksForPage(filteredTasks, this.state.currentPage)), this.renderPages(totalPages));\n  }\n\n}\n\nexport default Tasks;","map":{"version":3,"sources":["/Users/administrator/Downloads/Projects/ToDos/todo_app/src/components/tasks.jsx"],"names":["React","Component","MAX_RECORDS_PER_PAGE","Tasks","constructor","setState","currentPage","getFilteredTasks","props","view","tasks","filter","v","status","getTasksForPage","filteredTasks","pagno","indexOfLastTask","state","indexOfFirstTask","slice","render","totalPages","Math","ceil","length","renderTasks","renderPages"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,OAA1B;AAEA,MAAMC,oBAAoB,GAAG,CAA7B;;AACA,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAS1BG,EAAAA,WAAW,GAAG;AACV,SAAKC,QAAL,CAAc;AAAEC,MAAAA,WAAW,EAAE;AAAf,KAAd;AACH;;AAEDC,EAAAA,gBAAgB,GAAG;AACf,YAAQ,KAAKC,KAAL,CAAWC,IAAnB;AACI,WAAK,UAAL;AACI,eAAO,KAAKD,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAa,UAA1C,CAAP;;AACJ,WAAK,YAAL;AACI,eAAO,KAAKL,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAa,YAA1C,CAAP;;AACJ;AACI,eAAO,KAAKL,KAAL,CAAWE,KAAlB;AANR;AAQH;;AACDI,EAAAA,eAAe,CAACC,aAAD,EAAgBC,KAAhB,EAAuB;AAClC,UAAMC,eAAe,GAAG,KAAKC,KAAL,CAAWZ,WAAX,GAAyBJ,oBAAjD;AACA,UAAMiB,gBAAgB,GAAGF,eAAe,GAAGf,oBAA3C;AACA,WAAOa,aAAa,CAACK,KAAd,CAAoBD,gBAApB,EAAsCF,eAAtC,CAAP;AACH;;AAsFDI,EAAAA,MAAM,GAAG;AACL,UAAMN,aAAa,GAAG,KAAKR,gBAAL,EAAtB;AACA,UAAMe,UAAU,GAAGC,IAAI,CAACC,IAAL,CACfT,aAAa,CAACU,MAAd,GAAuBvB,oBADR,CAAnB;AAIA,WACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKwB,WAAL,CACG,KAAKZ,eAAL,CAAqBC,aAArB,EAAoC,KAAKG,KAAL,CAAWZ,WAA/C,CADH,CADL,EAIK,KAAKqB,WAAL,CAAiBL,UAAjB,CAJL,CADJ;AAQH;;AA/HyB;;AAkI9B,eAAenB,KAAf","sourcesContent":["import React from \"react\";\nimport { Component } from \"react\";\n\nconst MAX_RECORDS_PER_PAGE = 4;\nclass Tasks extends Component {\n    state = {\n        currentPage: 1\n    };\n\n    handleClick = number => event => {\n        this.setState({ currentPage: number });\n    };\n\n    constructor() {\n        this.setState({ currentPage: 1 });\n    }\n\n    getFilteredTasks() {\n        switch (this.props.view) {\n            case \"COMPLETE\":\n                return this.props.tasks.filter(v => v.status === \"COMPLETE\");\n            case \"INCOMPLETE\":\n                return this.props.tasks.filter(v => v.status === \"INCOMPLETE\");\n            default:\n                return this.props.tasks;\n        }\n    }\n    getTasksForPage(filteredTasks, pagno) {\n        const indexOfLastTask = this.state.currentPage * MAX_RECORDS_PER_PAGE;\n        const indexOfFirstTask = indexOfLastTask - MAX_RECORDS_PER_PAGE;\n        return filteredTasks.slice(indexOfFirstTask, indexOfLastTask);\n    }\n\n    renderTasks = tasks => {\n        return (\n            <ul className=\"tasklist\" id=\"todoList\">\n                {tasks.map(task => (\n                    <li\n                        key={task.id}\n                        className={\n                            task.status === \"INCOMPLETE\"\n                                ? \"task incomplete\"\n                                : \"task complete\"\n                        }\n                        onClick={() => this.props.toggleTask(task)}\n                    >\n                        <div className=\"todoContainer\">{task.name}</div>\n\n                        <button\n                            className=\"delete\"\n                            onClick={ev => this.props.onDelete(task.id, ev)}\n                        >\n                            X\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        );\n    };\n\n    renderPages = totalPages => {\n        const pageNumbers = [];\n\n        for (let i = 1; i <= totalPages; i++) {\n            pageNumbers.push(i);\n        }\n        return (\n            <ul className=\"page-numbers\">\n                <li\n                    className={\n                        this.state.currentPage === 1\n                            ? \"disabled pages\"\n                            : \"pages\"\n                    }\n                    onClick={ev => {\n                        ev.target.className !== \"disabled pages\" &&\n                            this.setState({\n                                currentPage: this.state.currentPage - 1\n                            });\n                    }}\n                >\n                    Prev\n                </li>\n                {pageNumbers.map(number => (\n                    <li\n                        key={number}\n                        id={number}\n                        className={\n                            number === this.state.currentPage\n                                ? \"pages active\"\n                                : \"pages\"\n                        }\n                        onClick={this.handleClick(number)}\n                    >\n                        {number}\n                    </li>\n                ))}\n                <li\n                    className={\n                        this.state.currentPage === totalPages ||\n                        this.getFilteredTasks().length === 0\n                            ? \"disabled pages\"\n                            : \"pages\"\n                    }\n                    onClick={ev => {\n                        ev.target.className !== \"disabled pages\" &&\n                            this.setState({\n                                currentPage: this.state.currentPage + 1\n                            });\n                    }}\n                >\n                    Next\n                </li>\n            </ul>\n        );\n    };\n\n    render() {\n        const filteredTasks = this.getFilteredTasks();\n        const totalPages = Math.ceil(\n            filteredTasks.length / MAX_RECORDS_PER_PAGE\n        );\n\n        return (\n            <React.Fragment>\n                {this.renderTasks(\n                    this.getTasksForPage(filteredTasks, this.state.currentPage)\n                )}\n                {this.renderPages(totalPages)}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Tasks;\n"]},"metadata":{},"sourceType":"module"}