{"ast":null,"code":"var _jsxFileName = \"/Users/administrator/Downloads/Projects/ToDos/todo_app/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.scss';\nimport AddTask from './components/addTask';\nimport Tasks from './components/tasks';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tasks: [{\n        id: '1',\n        name: 'Completed Task',\n        status: 'COMPLETE'\n      }, {\n        id: '2',\n        name: 'Incomplete Task',\n        status: 'INCOMPLETE'\n      }],\n      lastIndex: 2,\n      view: 'ALL'\n    };\n\n    this.onToggleComplete = toggleTask => {\n      const tasks = this.state.tasks.map(task => {\n        if (task.id === toggleTask.id) {\n          let status;\n\n          if (task.status === 'COMPLETE') {\n            status = 'INCOMPLETE';\n          } else {\n            status = 'COMPLETE';\n          }\n\n          return { ...task,\n            status\n          };\n        }\n\n        return task;\n      });\n      this.setState({\n        tasks\n      });\n    };\n\n    this.onInputHandler = todo => {\n      if (todo === '') {\n        alert('Empty Task');\n        return;\n      }\n\n      const lastIndex = this.state.lastIndex + 1;\n      const tasks = [...this.state.tasks, {\n        id: \"\" + lastIndex,\n        name: todo,\n        status: 'INCOMPLETE'\n      }];\n      this.setState({\n        tasks,\n        lastIndex\n      });\n    };\n\n    this.deleteTodo = (todoId, ev) => {\n      const tasks = this.state.tasks.filter(task => task.id !== todoId);\n      this.setState({\n        tasks\n      });\n      ev.stopPropagation();\n    };\n\n    this.defaultView = ev => {\n      ev.target.className = 'filter active';\n      const view = 'ALL';\n      this.setState({\n        view\n      });\n    };\n\n    this.completedTasksView = ev => {\n      ev.target.className = 'filter active';\n      const view = 'COMPLETE';\n      this.setState({\n        view\n      });\n    };\n\n    this.incompleteTasksView = ev => {\n      ev.target.className = 'filter active';\n      const view = 'INCOMPLETE';\n      this.setState({\n        view\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(AddTask, {\n      onAdd: this.onInputHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(Tasks, {\n      toggleTask: this.onToggleComplete,\n      onDelete: this.deleteTodo,\n      tasks: this.state.tasks,\n      view: this.state.view,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"filters\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"filter\",\n      onClick: this.defaultView,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"All Tasks\"), React.createElement(\"button\", {\n      className: \"filter\",\n      onClick: this.incompleteTasksView,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Incomplete Tasks\"), React.createElement(\"button\", {\n      className: \"filter\",\n      onClick: this.completedTasksView,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Completed Tasks\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/administrator/Downloads/Projects/ToDos/todo_app/src/App.js"],"names":["React","Component","AddTask","Tasks","App","state","tasks","id","name","status","lastIndex","view","onToggleComplete","toggleTask","map","task","setState","onInputHandler","todo","alert","deleteTodo","todoId","ev","filter","stopPropagation","defaultView","target","className","completedTasksView","incompleteTasksView","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.scss';\nimport AddTask from './components/addTask'\nimport Tasks from './components/tasks';\n\nclass App extends Component {\n  state = {\n    tasks: [\n      {\n        id: '1',\n        name: 'Completed Task',\n        status: 'COMPLETE',\n      },\n      {\n        id: '2',\n        name: 'Incomplete Task',\n        status: 'INCOMPLETE',\n      },\n    ],\n    lastIndex: 2,\n    view: 'ALL'\n  };\n\n  onToggleComplete = (toggleTask) => {\n    const tasks = this.state.tasks.map(task => {\n      if (task.id === toggleTask.id) {\n        let status;\n        if (task.status === 'COMPLETE') {\n          status = 'INCOMPLETE';\n        }\n        else {\n          status = 'COMPLETE';\n        }\n        return { ...task, status };\n      }\n      return task;\n    })\n    this.setState({ tasks });\n  };\n\n  onInputHandler = (todo) => {\n    if (todo === '') {\n      alert('Empty Task');\n      return;\n    }\n    const lastIndex = this.state.lastIndex + 1;\n    const tasks = [...this.state.tasks, {\n      id: \"\" + lastIndex,\n      name: todo,\n      status: 'INCOMPLETE',\n    }];\n    this.setState({ tasks, lastIndex });\n  }\n\n  deleteTodo = (todoId, ev) => {\n    const tasks = this.state.tasks.filter(task => task.id !== todoId);\n    this.setState({ tasks });\n    ev.stopPropagation();\n  };\n\n  defaultView = (ev) => {\n    ev.target.className = 'filter active';\n    const view = 'ALL';\n    this.setState({ view });\n  }\n\n  completedTasksView = (ev) => {\n    ev.target.className = 'filter active';\n    const view = 'COMPLETE';\n    this.setState({ view });\n  }\n\n  incompleteTasksView = (ev) => {\n    ev.target.className = 'filter active';\n    const view = 'INCOMPLETE';\n    this.setState({ view });\n  }\n\n  render() {\n    return (\n      <div className='body'>\n        <AddTask onAdd={this.onInputHandler} />\n        <Tasks toggleTask={this.onToggleComplete} onDelete={this.deleteTodo} tasks={this.state.tasks} view={this.state.view} />\n        <div className=\"filters\">\n          <button className='filter' onClick={this.defaultView}>All Tasks</button>\n          <button className='filter' onClick={this.incompleteTasksView}>Incomplete Tasks</button>\n          <button className='filter' onClick={this.completedTasksView}>Completed Tasks</button>\n        </div>\n      </div >\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}