{"ast":null,"code":"var _jsxFileName = \"/Users/administrator/Downloads/Projects/ToDos/todo_app/src/components/tasks.jsx\";\nimport React from \"react\";\nimport { Component } from \"react\";\n\nclass Tasks extends Component {\n  constructor() {\n    super();\n\n    this.handleClick = event => {\n      this.setStatse({\n        currentPage: event.target.id\n      });\n    };\n\n    this.state = {\n      displayTasks: [],\n      currentPage: 1,\n      tasksPerPage: 4\n    };\n    this.handleClick = this.handleClick.bind(this);\n\n    if (this.props.view === \"ALL\") {\n      this.state.displayTasks = [...this.props.tasks];\n    } else if (this.props.view === \"COMPLETE\") {\n      this.state.displayTasks = this.props.tasks.filter(task => task.status === \"COMPLETE\");\n    } else {\n      this.state.displayTasks = this.props.tasks.filter(task => task.status === \"INCOMPLETE\");\n    }\n  }\n\n  render() {\n    const {\n      displayTasks,\n      currentPage,\n      tasksPerPage\n    } = this.state;\n    const indexOfLastTask = currentPage * tasksPerPage;\n    const indexOfFirstTask = indexOfLastTask - tasksPerPage;\n    const currentTasks = displayTasks.slice(indexOfFirstTask, indexOfLastTask);\n    const renderTasks = React.createElement(\"ul\", {\n      className: \"tasklist\",\n      id: \"todoList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, currentTasks.map(task => React.createElement(\"li\", {\n      className: \"task\",\n      key: task.id,\n      className: task.status === \"INCOMPLETE\" ? \"task incomplete\" : \"task complete\",\n      onClick: () => this.props.toggleTask(task),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"todoContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, task.name), React.createElement(\"button\", {\n      className: \"delete\",\n      onClick: ev => this.props.onDelete(task.id, ev),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"X\"))));\n    const pageNumbers = [];\n\n    for (let i = 1; i <= Math.ceil(displayTasks.length / tasksPerPage); i++) {\n      pageNumbers.push(i);\n    }\n\n    const renderPages = React.createElement(\"ul\", {\n      id: \"page-numbers\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, pageNumbers.map(number => {\n      React.createElement(\"li\", {\n        key: number,\n        id: number,\n        onCanPlay: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"numbers\");\n    }));\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, renderTasks);\n  }\n\n}\n\nexport default Tasks;","map":{"version":3,"sources":["/Users/administrator/Downloads/Projects/ToDos/todo_app/src/components/tasks.jsx"],"names":["React","Component","Tasks","constructor","handleClick","event","setStatse","currentPage","target","id","state","displayTasks","tasksPerPage","bind","props","view","tasks","filter","task","status","render","indexOfLastTask","indexOfFirstTask","currentTasks","slice","renderTasks","map","toggleTask","name","ev","onDelete","pageNumbers","i","Math","ceil","length","push","renderPages","number"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Component } from \"react\";\n\nclass Tasks extends Component {\n    constructor() {\n        super();\n        this.state = {\n            displayTasks: [],\n            currentPage: 1,\n            tasksPerPage: 4\n        };\n        this.handleClick = this.handleClick.bind(this);\n        if (this.props.view === \"ALL\") {\n            this.state.displayTasks = [...this.props.tasks];\n        } else if (this.props.view === \"COMPLETE\") {\n            this.state.displayTasks = this.props.tasks.filter(\n                task => task.status === \"COMPLETE\"\n            );\n        } else {\n            this.state.displayTasks = this.props.tasks.filter(\n                task => task.status === \"INCOMPLETE\"\n            );\n        }\n    }\n\n    handleClick = event => {\n        this.setStatse({ currentPage: event.target.id });\n    };\n    render() {\n        const { displayTasks, currentPage, tasksPerPage } = this.state;\n        const indexOfLastTask = currentPage * tasksPerPage;\n        const indexOfFirstTask = indexOfLastTask - tasksPerPage;\n        const currentTasks = displayTasks.slice(\n            indexOfFirstTask,\n            indexOfLastTask\n        );\n\n        const renderTasks = (\n            <ul className=\"tasklist\" id=\"todoList\">\n                {currentTasks.map(task => (\n                    <li\n                        className=\"task\"\n                        key={task.id}\n                        className={\n                            task.status === \"INCOMPLETE\"\n                                ? \"task incomplete\"\n                                : \"task complete\"\n                        }\n                        onClick={() => this.props.toggleTask(task)}\n                    >\n                        <div className=\"todoContainer\">{task.name}</div>\n\n                        <button\n                            className=\"delete\"\n                            onClick={ev => this.props.onDelete(task.id, ev)}\n                        >\n                            X\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        );\n        const pageNumbers = [];\n        for (\n            let i = 1;\n            i <= Math.ceil(displayTasks.length / tasksPerPage);\n            i++\n        ) {\n            pageNumbers.push(i);\n        }\n        const renderPages = (\n            <ul id=\"page-numbers\">\n                {pageNumbers.map(number => {\n                    <li key={number} id={number} onCanPlay={this.handleClick}>\n                        numbers\n                    </li>;\n                })}\n            </ul>\n        );\n\n        return <React.Fragment>{renderTasks}</React.Fragment>;\n    }\n}\n\nexport default Tasks;\n"]},"metadata":{},"sourceType":"module"}