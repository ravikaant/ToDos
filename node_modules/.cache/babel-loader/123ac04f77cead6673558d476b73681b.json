{"ast":null,"code":"var _jsxFileName = \"/Users/administrator/Downloads/Projects/ToDos/todo_app/src/components/tasks.jsx\";\nimport React from \"react\";\nimport { Component } from \"react\";\nconst MAX_RECORDS_PER_PAGE = 1;\n\nclass Tasks extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentPage: 1\n    };\n\n    this.handleClick = event => {\n      this.setState({\n        currentPage: event.target.id\n      });\n    };\n  }\n\n  getFilteredTasks() {\n    switch (this.props.view) {\n      case \"COMPLETE\":\n        return this.props.tasks.filter(v => v.status === \"COMPLETE\");\n\n      case \"INCOMPLETE\":\n        return this.props.tasks.filter(v => v.status === \"INCOMPLETE\");\n\n      default:\n        return this.props.tasks;\n    }\n  }\n\n  render() {\n    const totalTasks = this.getFilteredTasks().length;\n    const maxRecordsPerPage = MAX_RECORDS_PER_PAGE;\n    const currentPage = this.state.currentPage;\n    const filteredTasks = this.getFilteredTasks();\n    const indexOfLastTask = this.state.currentPage * maxRecordsPerPage;\n    const indexOfFirstTask = indexOfLastTask - maxRecordsPerPage;\n    const currentTasks = filteredTasks.slice(indexOfFirstTask, indexOfLastTask);\n    const renderTasks = React.createElement(\"ul\", {\n      className: \"tasklist\",\n      id: \"todoList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, currentTasks.map(task => React.createElement(\"li\", {\n      key: task.id,\n      className: task.status === \"INCOMPLETE\" ? \"task incomplete\" : \"task complete\",\n      onClick: () => this.props.toggleTask(task),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"todoContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, task.name), React.createElement(\"button\", {\n      className: \"delete\",\n      onClick: ev => this.props.onDelete(task.id, ev),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"X\"))));\n    const pageNumbers = [];\n\n    for (let i = 1; i <= Math.ceil(filteredTasks.length / maxRecordsPerPage); i++) {\n      pageNumbers.push(pageNumbers);\n    }\n\n    console.log(pageNumbers);\n    const renderPages = React.createElement(\"ul\", {\n      className: \"page-numbers\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, pageNumbers.map(number => React.createElement(\"li\", {\n      className: \"pages\",\n      key: number,\n      id: number,\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, number)));\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, renderTasks, renderPages);\n  }\n\n}\n\nexport default Tasks;","map":{"version":3,"sources":["/Users/administrator/Downloads/Projects/ToDos/todo_app/src/components/tasks.jsx"],"names":["React","Component","MAX_RECORDS_PER_PAGE","Tasks","state","currentPage","handleClick","event","setState","target","id","getFilteredTasks","props","view","tasks","filter","v","status","render","totalTasks","length","maxRecordsPerPage","filteredTasks","indexOfLastTask","indexOfFirstTask","currentTasks","slice","renderTasks","map","task","toggleTask","name","ev","onDelete","pageNumbers","i","Math","ceil","push","console","log","renderPages","number"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Component } from \"react\";\n\nconst MAX_RECORDS_PER_PAGE = 1;\nclass Tasks extends Component {\n    state = {\n        currentPage: 1\n    };\n\n    handleClick = event => {\n        this.setState({ currentPage: event.target.id });\n    };\n\n    getFilteredTasks() {\n        switch (this.props.view) {\n            case \"COMPLETE\":\n                return this.props.tasks.filter(v => v.status === \"COMPLETE\");\n            case \"INCOMPLETE\":\n                return this.props.tasks.filter(v => v.status === \"INCOMPLETE\");\n            default:\n                return this.props.tasks;\n        }\n    }\n    render() {\n        const totalTasks = this.getFilteredTasks().length;\n        const maxRecordsPerPage = MAX_RECORDS_PER_PAGE;\n        const currentPage = this.state.currentPage;\n\n        const filteredTasks = this.getFilteredTasks();\n        const indexOfLastTask = this.state.currentPage * maxRecordsPerPage;\n        const indexOfFirstTask = indexOfLastTask - maxRecordsPerPage;\n        const currentTasks = filteredTasks.slice(\n            indexOfFirstTask,\n            indexOfLastTask\n        );\n\n        const renderTasks = (\n            <ul className=\"tasklist\" id=\"todoList\">\n                {currentTasks.map(task => (\n                    <li\n                        key={task.id}\n                        className={\n                            task.status === \"INCOMPLETE\"\n                                ? \"task incomplete\"\n                                : \"task complete\"\n                        }\n                        onClick={() => this.props.toggleTask(task)}\n                    >\n                        <div className=\"todoContainer\">{task.name}</div>\n\n                        <button\n                            className=\"delete\"\n                            onClick={ev => this.props.onDelete(task.id, ev)}\n                        >\n                            X\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        );\n\n        const pageNumbers = [];\n        for (\n            let i = 1;\n            i <= Math.ceil(filteredTasks.length / maxRecordsPerPage);\n            i++\n        ) {\n            pageNumbers.push(pageNumbers);\n        }\n        console.log(pageNumbers);\n        const renderPages = (\n            <ul className=\"page-numbers\">\n                {pageNumbers.map(number => (\n                    <li\n                        className=\"pages\"\n                        key={number}\n                        id={number}\n                        onClick={this.handleClick}\n                    >\n                        {number}\n                    </li>\n                ))}\n            </ul>\n        );\n\n        return (\n            <React.Fragment>\n                {renderTasks}\n                {renderPages}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Tasks;\n"]},"metadata":{},"sourceType":"module"}